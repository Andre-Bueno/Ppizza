<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8" />
    <title>Pedido de Pizza</title>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            max-width: 600px;
            margin: 40px auto;
            padding: 20px;
            background: #f9f9f9;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            padding-bottom: 100px; /* Espaço para o ícone flutuante não sobrepor conteúdo no final */
        }

        h2, h3 {
            margin-top: 30px;
            margin-bottom: 15px;
            font-weight: bold;
            color: #333;
        }
        h2 {
            color: #e30613;
        }
        h3 {
            color: #555;
        }

        label {
            display: block;
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            cursor: pointer;
            background-color: #fff;
        }
        label:hover {
            border-color: #bbb;
        }


        input[type="radio"],
        input[type="checkbox"] {
            margin-right: 10px;
            vertical-align: middle;
        }

        select,
        input[type="text"],
        input[type="tel"] {
            width: 100%;
            box-sizing: border-box;
            padding: 12px 16px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #fff;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            color: #333;
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        input[type="text"]::placeholder,
        input[type="tel"]::placeholder {
            color: #999;
        }

        select {
            appearance: none;
            background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="8"><path fill="none" stroke="%23333" stroke-width="2" d="M1 1l5 5 5-5"/></svg>');
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 12px 8px;
        }

        select:focus,
        input[type="text"]:focus,
        input[type="tel"]:focus {
            border-color: #e30613;
            outline: none;
            box-shadow: 0 0 0 3px rgba(227, 6, 19, 0.2);
        }
        input[readonly] {
            background-color: #f0f0f0 !important;
            cursor: not-allowed;
        }

        .item-atual-total { /* Total do item sendo configurado */
            display: block;
            width: calc(100% - 22px); /* Considera padding do elemento pai se houver */
            box-sizing: border-box;
            padding: 12px;
            margin-top: 20px;
            border: 1px solid #e30613; 
            border-radius: 10px;
            text-align: center;
            color: #e30613;
            font-weight: bold;
            font-size: 1.1em;
            background-color: #fff5f5;
        }
       
        .btn-adicionar, .btn-finalizar-modal { /* Botões principais */
            display: block;
            width: 100%;
            padding: 15px;
            margin-top: 15px;
            font-weight: bold;
            text-align: center;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.3s;
        }
        .btn-adicionar {
            background-color: #28a745; 
            color: white;
        }
        .btn-adicionar:hover {
            background-color: #218838;
        }
        .btn-finalizar-modal { /* Botão de finalizar dentro do modal */
            background-color: #e30613; 
            color: white;
        }
        .btn-finalizar-modal:hover {
            background-color: #c50511;
        }


        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: normal;
            padding: 0;
            border: none;
            border-radius: 0;
            cursor: default;
            background-color: transparent;
        }

        .delivery-status {
            margin-top: 15px; padding: 10px; border-radius: 5px; font-weight: bold; text-align: center; font-size: 14px;
        }
        .delivery-available { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .delivery-unavailable { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .loading-message, .error-message, .info-message { display: none; margin-top: 8px; font-size: 13px; text-align: left; }
        .loading-message, .info-message { color: #007bff; }
        .error-message { color: #dc3545; font-weight: bold; }

        #pedido-config-section { display: none; } /* Seção de montar item inicialmente oculta */

        /* --- Estilos do Ícone Flutuante do Carrinho --- */
        #carrinho-icone-flutuante {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #e30613;
            color: white;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 999;
            transition: transform 0.2s ease-in-out;
        }
        #carrinho-icone-flutuante:hover {
            transform: scale(1.1);
        }
        #carrinho-icone-simbolo {
            font-size: 24px;
        }
        #carrinho-icone-contador {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: #ffc107;
            color: #333;
            font-size: 12px;
            font-weight: bold;
            padding: 3px 7px;
            border-radius: 50%;
            border: 1px solid white;
        }

        /* --- Estilos do Modal do Carrinho --- */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal-overlay.visivel {
            opacity: 1;
            visibility: visible;
        }
        .modal-conteudo {
            background-color: #fff;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 500px;
            max-height: 85vh; /* Altura máxima do modal */
            display: flex;
            flex-direction: column;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }
        .modal-overlay.visivel .modal-conteudo {
            transform: scale(1);
        }
        .modal-cabecalho {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 15px;
            margin-bottom: 15px;
        }
        .modal-cabecalho h3 {
            margin: 0;
            color: #e30613;
        }
        .btn-fechar-modal {
            background: none;
            border: none;
            font-size: 28px;
            cursor: pointer;
            color: #888;
            padding: 0;
            line-height: 1;
        }
        .btn-fechar-modal:hover {
            color: #333;
        }
        .modal-corpo {
            overflow-y: auto; /* Permite rolagem se o conteúdo for grande */
            flex-grow: 1; /* Ocupa o espaço disponível */
            margin-bottom: 20px;
        }
        .carrinho-total-geral-modal { /* Total dentro do modal */
            padding: 12px;
            margin-top: 10px; /* Reduzido para caber melhor no modal */
            border: 1px solid #1a7e34; 
            border-radius: 10px;
            text-align: center;
            color: #1a7e34;
            font-weight: bold;
            font-size: 1.1em;
            background-color: #f5fff5;
        }

        /* Estilos dos Itens do Carrinho dentro do Modal */
        #carrinho-items-list-modal { margin-bottom: 10px; }
        .carrinho-item {
            background-color: #f9f9f9; /* Fundo um pouco diferente para destacar */
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }
        .carrinho-item p { margin: 5px 0; font-size: 0.95em; }
        .carrinho-item strong { color: #333; }
        .carrinho-item .item-sabores { font-style: italic; color: #555; }
        .carrinho-item .item-preco { font-weight: bold; color: #e30613; margin-top: 8px; }
        .btn-remover-item {
            background-color: #ffc107; 
            color: #333;
            border: none;
            padding: 6px 12px;
            font-size: 0.9em;
            border-radius: 5px;
            cursor: pointer;
            float: right;
            margin-top: -5px; 
        }
        .btn-remover-item:hover { background-color: #e0a800; }

    </style>
</head>

<body>
    <h2>1. Endereço de Entrega</h2>
    <div class="form-group">
        <label for="cep">Digite seu CEP</label>
        <input type="tel" id="cep" name="cep" placeholder="00000-000" maxlength="9">
        <div id="cep-loading" class="loading-message">Buscando CEP...</div>
        <div id="geocoding-loading" class="info-message">Verificando disponibilidade de entrega...</div>
        <div id="cep-error" class="error-message"></div>
    </div>
    <div class="form-group">
        <label for="rua">Rua/Avenida</label>
        <input type="text" id="rua" name="rua" placeholder="Rua/Avenida" readonly>
    </div>
    <div class="form-group">
        <label for="numero">Número</label>
        <input type="text" id="numero" name="numero" placeholder="Número (obrigatório)">
    </div>
    <div class="form-group">
        <label for="complemento">Complemento</label>
        <input type="text" id="complemento" name="complemento" placeholder="Complemento (obrigatório, ex: Apto 101)">
    </div>
    <div class="form-group">
        <label for="bairro">Bairro</label>
        <input type="text" id="bairro" name="bairro" placeholder="Bairro" readonly>
    </div>
    <div class="form-group">
        <label for="cidade">Cidade</label>
        <input type="text" id="cidade" name="cidade" placeholder="Cidade" readonly>
    </div>
    <div class="form-group">
        <label for="estado">Estado</label>
        <input type="text" id="estado" name="estado" placeholder="Estado" readonly>
    </div>
    <div id="delivery-status" class="delivery-status" style="display: none;"></div>

    <div id="pedido-config-section">
        <h2>2. Monte seu Item</h2>
        <h3>Sabores da Pizza</h3>
        <select id="sabor1" required>
            <option value="" data-preco-Pequeno="0" data-preco-Medio="0" data-preco-Grande="0">-- Selecione o Sabor 1 --</option>
            <option value="Mucarela" data-preco-Pequeno="38" data-preco-Medio="45" data-preco-Grande="51">Muçarela</option>
            <option value="Napolitana" data-preco-Pequeno="35" data-preco-Medio="42" data-preco-Grande="46">Napolitana</option>
            <option value="Vegetariana" data-preco-Pequeno="35" data-preco-Medio="42" data-preco-Grande="46">Vegetariana</option>
            <option value="Frango Com Bacon" data-preco-Pequeno="40" data-preco-Medio="49" data-preco-Grande="56">Frango Com Bacon</option>
            <option value="Frango Com Catupiry" data-preco-Pequeno="40" data-preco-Medio="49" data-preco-Grande="59">Frango Com Catupiry</option>
        </select>
        <select id="sabor2" required>
            <option value="" data-preco-Pequeno="0" data-preco-Medio="0" data-preco-Grande="0">-- Selecione o Sabor 2 --</option>
            <option value="Mucarela" data-preco-Pequeno="38" data-preco-Medio="45" data-preco-Grande="51">Muçarela</option>
            <option value="Napolitana" data-preco-Pequeno="35" data-preco-Medio="42" data-preco-Grande="46">Napolitana</option>
            <option value="Vegetariana" data-preco-Pequeno="35" data-preco-Medio="42" data-preco-Grande="46">Vegetariana</option>
            <option value="Frango Com Bacon" data-preco-Pequeno="40" data-preco-Medio="49" data-preco-Grande="56">Frango Com Bacon</option>
            <option value="Frango Com Catupiry" data-preco-Pequeno="40" data-preco-Medio="49" data-preco-Grande="59">Frango Com Catupiry</option>
        </select>

        <h3>Tamanho da Pizza</h3>
        <label><input type="radio" name="tamanho" value="Pequeno" /> Pequeno</label>
        <label><input type="radio" name="tamanho" value="Medio" /> Médio</label>
        <label><input type="radio" name="tamanho" value="Grande" /> Grande</label>

        <h3>Adicionais à Pizza</h3>
        <label><input type="checkbox" class="adicional-pizza" value="Borda Recheada" data-preco="15" /> Borda Recheada - R$ 15,00</label>
        <label><input type="checkbox" class="adicional-pizza" value="Bacon Extra" data-preco="27" /> Bacon Extra - R$ 27,00</label>
        <label><input type="checkbox" class="adicional-pizza" value="Queijo Extra" data-preco="19" /> Queijo Extra - R$ 19,00</label>

        <h3>Bebidas</h3>
        <label><input type="checkbox" class="item-bebida" value="Coca-Cola 2 Litros" data-preco="12" /> Coca-Cola 2 Litros - R$ 12,00</label>
        <label><input type="checkbox" class="item-bebida" value="Coca-Cola 350 ML" data-preco="5" /> Coca-Cola 350 ML - R$ 5,00</label>

        <div class="item-atual-total" id="item-atual-total">Preço do Item Atual: R$ 0,00</div>
        <button id="btnAdicionarAoCarrinho" class="btn-adicionar">Adicionar Item ao Carrinho</button>
    </div>

    <div id="carrinho-icone-flutuante" title="Ver Carrinho">
        <span id="carrinho-icone-simbolo">🛒</span>
        <span id="carrinho-icone-contador">0</span>
    </div>

    <div id="carrinho-modal-overlay" class="modal-overlay">
        <div id="carrinho-modal-conteudo" class="modal-conteudo">
            <div id="carrinho-modal-cabecalho" class="modal-cabecalho">
                <h3>Seu Carrinho</h3>
                <button id="btn-fechar-modal-carrinho" class="btn-fechar-modal" title="Fechar">&times;</button>
            </div>
            <div id="carrinho-modal-corpo" class="modal-corpo">
                <div id="carrinho-items-list-modal">
                    <p>Seu carrinho está vazio.</p>
                </div>
            </div>
            <div id="carrinho-modal-rodape">
                <div class="carrinho-total-geral-modal" id="carrinho-total-geral-modal">Total do Pedido: R$ 0,00</div>
                <button id="btnFinalizarCompraModal" class="btn-finalizar-modal">Finalizar Compra e Enviar Pedido</button>
            </div>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const PIZZARIA_COORDS = { lat: -16.68781976896233, lon: -49.1883159035631 };
            const RAIO_MAXIMO_ENTREGA_KM = 10;
            const CARRINHO_STORAGE_KEY = 'pedidoPizzaCarrinho'; 

            const cepInput = document.getElementById('cep');
            const ruaInput = document.getElementById('rua');
            const bairroInput = document.getElementById('bairro');
            const cidadeInput = document.getElementById('cidade');
            const estadoInput = document.getElementById('estado');
            const numeroInput = document.getElementById('numero');
            const complementoInput = document.getElementById('complemento');
            const deliveryStatusDiv = document.getElementById('delivery-status');
            const cepLoadingDiv = document.getElementById('cep-loading');
            const geocodingLoadingDiv = document.getElementById('geocoding-loading');
            const cepErrorDiv = document.getElementById('cep-error');
            
            const pedidoConfigSection = document.getElementById('pedido-config-section');
            
            const sabor1Select = document.getElementById('sabor1');
            const sabor2Select = document.getElementById('sabor2');
            const itemAtualTotalDiv = document.getElementById('item-atual-total');
            const btnAdicionarAoCarrinho = document.getElementById('btnAdicionarAoCarrinho');

            // --- Elementos do Carrinho (Ícone e Modal) ---
            let carrinho = []; 
            const carrinhoIconeFlutuante = document.getElementById('carrinho-icone-flutuante');
            const carrinhoIconeContador = document.getElementById('carrinho-icone-contador');
            const carrinhoModalOverlay = document.getElementById('carrinho-modal-overlay');
            const btnFecharModalCarrinho = document.getElementById('btn-fechar-modal-carrinho');
            const carrinhoItemsListModalDiv = document.getElementById('carrinho-items-list-modal');
            const carrinhoTotalGeralModalDiv = document.getElementById('carrinho-total-geral-modal');
            const btnFinalizarCompraModal = document.getElementById('btnFinalizarCompraModal');


            let entregaDisponivelGlobal = false;
            let currentAddressData = null;

            function salvarCarrinhoNoStorage() {
                localStorage.setItem(CARRINHO_STORAGE_KEY, JSON.stringify(carrinho));
            }

            function carregarCarrinhoDoStorage() {
                const carrinhoSalvo = localStorage.getItem(CARRINHO_STORAGE_KEY);
                carrinho = carrinhoSalvo ? JSON.parse(carrinhoSalvo) : [];
            }
            
            // --- Funções de Controle do Modal ---
            function abrirModalCarrinho() {
                renderizarCarrinho(); // Garante que o carrinho está atualizado ao abrir
                if (carrinhoModalOverlay) carrinhoModalOverlay.classList.add('visivel');
            }
            function fecharModalCarrinho() {
                if (carrinhoModalOverlay) carrinhoModalOverlay.classList.remove('visivel');
            }

            if (carrinhoIconeFlutuante) carrinhoIconeFlutuante.addEventListener('click', abrirModalCarrinho);
            if (btnFecharModalCarrinho) btnFecharModalCarrinho.addEventListener('click', fecharModalCarrinho);
            if (carrinhoModalOverlay) { // Fechar ao clicar no overlay
                carrinhoModalOverlay.addEventListener('click', function(event) {
                    if (event.target === carrinhoModalOverlay) {
                        fecharModalCarrinho();
                    }
                });
            }
            // Fechar com a tecla ESC
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape' && carrinhoModalOverlay && carrinhoModalOverlay.classList.contains('visivel')) {
                    fecharModalCarrinho();
                }
            });


            // --- INÍCIO LÓGICA DE ENDEREÇO E ENTREGA (sem alterações diretas, apenas o que ela controla) ---
            if (cepInput) {
                cepInput.addEventListener('input', formatCEP);
                cepInput.addEventListener('blur', handleCepBlur);
            }
            if (numeroInput) { 
                numeroInput.addEventListener('blur', verificarEntregaSePossivel);
            }
             if (complementoInput) {
                complementoInput.addEventListener('blur', verificarEntregaSePossivel);
            }

            async function verificarEntregaSePossivel() {
                 if (currentAddressData && numeroInput.value.trim() !== '' && complementoInput.value.trim() !== '') {
                    await geocodeAndCheckDistance(currentAddressData, numeroInput.value.trim());
                } else if (currentAddressData && (numeroInput.value.trim() === '' || complementoInput.value.trim() === '')) {
                    let msg = "Os campos Número e Complemento são obrigatórios para verificar a entrega.";
                    if (numeroInput.value.trim() === '' && complementoInput.value.trim() !== '') {
                        msg = "Número do endereço é obrigatório para verificar a entrega.";
                    } else if (numeroInput.value.trim() !== '' && complementoInput.value.trim() === '') {
                         msg = "Complemento do endereço é obrigatório para verificar a entrega.";
                    }
                    updateDeliveryStatus(false, msg);
                    if (pedidoConfigSection) pedidoConfigSection.style.display = 'none';
                    entregaDisponivelGlobal = false;
                }
            }


            function formatCEP(event) {
                let value = event.target.value.replace(/\D/g, '');
                if (value.length > 5) { value = value.substring(0, 5) + '-' + value.substring(5, 8); }
                event.target.value = value;
            }

            async function handleCepBlur() {
                const cep = cepInput.value.replace(/\D/g, '');
                currentAddressData = null;
                clearAddressFields();
                hideDynamicMessages();
                if (cep.length !== 8) {
                    if (cep.length > 0) showError("CEP inválido. Deve conter 8 dígitos.");
                    return;
                }
                showCepLoading(true);
                try {
                    const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);
                    showCepLoading(false);
                    if (!response.ok) throw new Error(`Erro na API ViaCEP: ${response.status}`);
                    const data = await response.json();
                    if (data.erro) {
                        showError("CEP não encontrado."); clearAddressFields();
                    } else {
                        currentAddressData = data; fillAddressFields(data);
                        if (numeroInput.value.trim() !== '' && complementoInput.value.trim() !== '') {
                            await geocodeAndCheckDistance(data, numeroInput.value.trim());
                        } else {
                            let focusTarget = numeroInput.value.trim() === '' ? numeroInput : complementoInput;
                            updateDeliveryStatus(false, "Por favor, informe o Número e o Complemento para verificar a entrega.");
                            if (pedidoConfigSection) pedidoConfigSection.style.display = 'none';
                            entregaDisponivelGlobal = false; 
                            focusTarget.focus();
                        }
                    }
                } catch (error) {
                    showCepLoading(false); console.error("Falha ao buscar CEP:", error);
                    showError("Não foi possível buscar o CEP. Tente novamente."); clearAddressFields();
                }
            }

            function fillAddressFields(data) {
                ruaInput.value = data.logradouro || ''; bairroInput.value = data.bairro || '';
                cidadeInput.value = data.localidade || ''; estadoInput.value = data.uf || '';
                ruaInput.readOnly = !!data.logradouro; bairroInput.readOnly = !!data.bairro;
                cidadeInput.readOnly = true; estadoInput.readOnly = true;
            }

            function clearAddressFields() {
                ruaInput.value = ''; bairroInput.value = ''; cidadeInput.value = ''; estadoInput.value = '';
                ruaInput.readOnly = true; bairroInput.readOnly = true;
                if (deliveryStatusDiv) deliveryStatusDiv.style.display = 'none';
                if (pedidoConfigSection) pedidoConfigSection.style.display = 'none';
                entregaDisponivelGlobal = false; currentAddressData = null;
            }
            
            function showCepLoading(isLoading) {
                if(cepLoadingDiv) cepLoadingDiv.style.display = isLoading ? 'block' : 'none';
                if (isLoading) {
                    if(cepErrorDiv) cepErrorDiv.style.display = 'none';
                    if(geocodingLoadingDiv) geocodingLoadingDiv.style.display = 'none';
                }
            }
            function showGeocodingLoading(isLoading) {
                if(geocodingLoadingDiv) geocodingLoadingDiv.style.display = isLoading ? 'block' : 'none';
                 if (isLoading) {
                    if(cepErrorDiv) cepErrorDiv.style.display = 'none';
                    if(cepLoadingDiv) cepLoadingDiv.style.display = 'none';
                }
            }

            function showError(message) {
                if(cepErrorDiv) { cepErrorDiv.textContent = message; cepErrorDiv.style.display = 'block';}
                if(deliveryStatusDiv) deliveryStatusDiv.style.display = 'none';
                if (pedidoConfigSection) pedidoConfigSection.style.display = 'none';
                entregaDisponivelGlobal = false; showCepLoading(false); showGeocodingLoading(false);
            }

            function hideDynamicMessages() {
                if(cepErrorDiv) cepErrorDiv.style.display = 'none';
                if(deliveryStatusDiv) deliveryStatusDiv.style.display = 'none';
                if(cepLoadingDiv) cepLoadingDiv.style.display = 'none';
                if(geocodingLoadingDiv) geocodingLoadingDiv.style.display = 'none';
            }
             function hideAllNonAddressMessages() {
                if(deliveryStatusDiv) deliveryStatusDiv.style.display = 'none';
                if(cepErrorDiv) cepErrorDiv.style.display = 'none';
                if(geocodingLoadingDiv) geocodingLoadingDiv.style.display = 'none';
            }

            async function geocodeAddressAPI(addressString) {
                const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(addressString)}&format=json&addressdetails=1&limit=1&countrycodes=br&viewbox=-53.270,-22.092,-45.994,-12.347&bounded=1`;
                showGeocodingLoading(true);
                hideAllNonAddressMessages();
                try {
                    const response = await fetch(url, { headers: { 'User-Agent': 'PedidoPizzaApp/1.0 (seuemail@example.com)' } });
                    if (!response.ok) throw new Error(`Nominatim API error: ${response.status}`);
                    const data = await response.json();
                    return (data && data.length > 0) ? { lat: parseFloat(data[0].lat), lon: parseFloat(data[0].lon) } : null;
                } catch (error) {
                    console.error("Geocoding error:", error); return null;
                } finally {
                    showGeocodingLoading(false);
                }
            }

            function calculateDistance(coords1, coords2) {
                function toRad(x) { return x * Math.PI / 180; }
                const R = 6371;
                const dLat = toRad(coords2.lat - coords1.lat); const dLon = toRad(coords2.lon - coords1.lon);
                const lat1 = toRad(coords1.lat); const lat2 = toRad(coords2.lat);
                const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }

            async function geocodeAndCheckDistance(addressDataFromViaCep, numeroEndereco) {
                entregaDisponivelGlobal = false;
                if (pedidoConfigSection) pedidoConfigSection.style.display = 'none';
                hideDynamicMessages();
                
                const numVal = numeroInput.value.trim();
                const compVal = complementoInput.value.trim();

                if (!numVal || !compVal ) { 
                    let msg = "Os campos Número e Complemento são obrigatórios para verificar a entrega.";
                     if (!numVal && compVal) msg = "Número do endereço é obrigatório.";
                     else if (numVal && !compVal) msg = "Complemento do endereço é obrigatório.";
                    updateDeliveryStatus(false, msg); 
                    return;
                }

                const addressString = `${addressDataFromViaCep.logradouro}, ${numVal}, ${addressDataFromViaCep.bairro}, ${addressDataFromViaCep.localidade}, ${addressDataFromViaCep.uf}, ${addressDataFromViaCep.cep}`;
                const clientCoords = await geocodeAddressAPI(addressString);

                if (clientCoords) {
                    const distance = calculateDistance(PIZZARIA_COORDS, clientCoords);
                    if (distance <= RAIO_MAXIMO_ENTREGA_KM) {
                        updateDeliveryStatus(true, `Ótima notícia! Entregamos em seu endereço (aprox. ${distance.toFixed(2)} km).`);
                        entregaDisponivelGlobal = true;
                        if (pedidoConfigSection) pedidoConfigSection.style.display = 'block'; 
                        // Não mostramos o carrinho modal aqui, apenas o ícone
                    } else {
                        updateDeliveryStatus(false, `🙁 Seu endereço está a aprox. ${distance.toFixed(2)} km, fora do nosso raio de entrega de ${RAIO_MAXIMO_ENTREGA_KM} km.`);
                    }
                } else {
                    updateDeliveryStatus(false, "Não foi possível encontrar as coordenadas do seu endereço. Verifique os dados ou tente um ponto de referência próximo.");
                }
            }

            function updateDeliveryStatus(isAvailable, message) {
                showGeocodingLoading(false);
                if(deliveryStatusDiv) {
                    deliveryStatusDiv.textContent = message;
                    deliveryStatusDiv.className = 'delivery-status';
                    deliveryStatusDiv.classList.add(isAvailable ? 'delivery-available' : 'delivery-unavailable');
                    deliveryStatusDiv.style.display = 'block';
                }
            }
            // --- FIM LÓGICA DE ENDEREÇO E ENTREGA ---


            // --- INÍCIO LÓGICA DE CONFIGURAÇÃO DO ITEM ATUAL E CARRINHO ---
            function calcularPrecoItemAtual() {
                let precoBasePizza = 0;
                let descricaoItem = "Pizza ";
                const sabor1Val = sabor1Select.value;
                const sabor2Val = sabor2Select.value;
                const tamanhoChecked = document.querySelector('input[name="tamanho"]:checked');

                if (sabor1Val && sabor2Val && tamanhoChecked) {
                    const nomeTamanho = tamanhoChecked.value.charAt(0).toUpperCase() + tamanhoChecked.value.slice(1);
                    const precoSabor1 = parseFloat(sabor1Select.options[sabor1Select.selectedIndex].dataset[`preco${nomeTamanho}`]) || 0;
                    const precoSabor2 = parseFloat(sabor2Select.options[sabor2Select.selectedIndex].dataset[`preco${nomeTamanho}`]) || 0;
                    if (precoSabor1 > 0 && precoSabor2 > 0) {
                        precoBasePizza = (precoSabor1 + precoSabor2) / 2;
                        descricaoItem += `${tamanhoChecked.value} (${sabor1Val} / ${sabor2Val})`;
                    } else if (precoSabor1 > 0) { 
                        precoBasePizza = precoSabor1;
                        descricaoItem += `${tamanhoChecked.value} (${sabor1Val})`;
                    } else if (precoSabor2 > 0) {
                        precoBasePizza = precoSabor2;
                         descricaoItem += `${tamanhoChecked.value} (${sabor2Val})`;
                    }
                } else if (sabor1Val && tamanhoChecked) { 
                     const nomeTamanho = tamanhoChecked.value.charAt(0).toUpperCase() + tamanhoChecked.value.slice(1);
                     precoBasePizza = parseFloat(sabor1Select.options[sabor1Select.selectedIndex].dataset[`preco${nomeTamanho}`]) || 0;
                     descricaoItem += `${tamanhoChecked.value} (${sabor1Val})`;
                } else if (sabor2Val && tamanhoChecked) { 
                     const nomeTamanho = tamanhoChecked.value.charAt(0).toUpperCase() + tamanhoChecked.value.slice(1);
                     precoBasePizza = parseFloat(sabor2Select.options[sabor2Select.selectedIndex].dataset[`preco${nomeTamanho}`]) || 0;
                     descricaoItem += `${tamanhoChecked.value} (${sabor2Val})`;
                }

                let precoTotalItem = precoBasePizza;
                let adicionaisPizzaSelecionados = [];
                document.querySelectorAll('input.adicional-pizza:checked').forEach(ad => {
                    precoTotalItem += parseFloat(ad.dataset.preco);
                    adicionaisPizzaSelecionados.push(ad.value);
                });

                let bebidasSelecionadas = [];
                document.querySelectorAll('input.item-bebida:checked').forEach(bebida => {
                    precoTotalItem += parseFloat(bebida.dataset.preco);
                    bebidasSelecionadas.push(bebida.value);
                });
                
                if (precoBasePizza === 0 && bebidasSelecionadas.length > 0) {
                    descricaoItem = bebidasSelecionadas.join(', ');
                } else if (precoBasePizza > 0 && bebidasSelecionadas.length > 0) {
                    descricaoItem += ` + Bebidas: ${bebidasSelecionadas.join(', ')}`;
                }
                if (precoBasePizza > 0 && adicionaisPizzaSelecionados.length > 0) {
                    descricaoItem += ` + Adicionais: ${adicionaisPizzaSelecionados.join(', ')}`;
                }

                itemAtualTotalDiv.textContent = `Preço do Item Atual: R$ ${precoTotalItem.toFixed(2).replace('.', ',')}`;
                
                return {
                    descricao: descricaoItem, sabor1: sabor1Val, sabor2: sabor2Val,
                    tamanho: tamanhoChecked ? tamanhoChecked.value : null,
                    adicionaisPizza: adicionaisPizzaSelecionados, bebidas: bebidasSelecionadas,
                    preco: precoTotalItem, isPizza: precoBasePizza > 0
                };
            }

            function adicionarItemAoCarrinho() {
                const item = calcularPrecoItemAtual();
                if (item.preco <= 0) {
                    alert("Selecione ao menos um item ou uma pizza válida para adicionar ao carrinho."); return;
                }
                if (!item.isPizza && item.bebidas.length === 0) {
                     alert("Selecione ao menos uma pizza ou bebida."); return;
                }
                carrinho.push(item); 
                salvarCarrinhoNoStorage(); 
                renderizarCarrinho(); // Atualiza o modal e o ícone contador
                resetarSeletoresDeItem(); 
                calcularPrecoItemAtual();
                // Opcional: abrir o modal do carrinho automaticamente após adicionar um item
                // abrirModalCarrinho(); 
            }

            function resetarSeletoresDeItem() {
                sabor1Select.value = ""; sabor2Select.value = "";
                document.querySelectorAll('input[name="tamanho"]').forEach(radio => radio.checked = false);
                document.querySelectorAll('input.adicional-pizza:checked').forEach(cb => cb.checked = false);
                document.querySelectorAll('input.item-bebida:checked').forEach(cb => cb.checked = false);
                atualizarLabelsTamanhos(); 
            }

            function renderizarCarrinho() { // Agora renderiza no modal e atualiza o ícone
                carrinhoItemsListModalDiv.innerHTML = ''; 
                let totalGeral = 0;

                if (carrinho.length === 0) {
                    carrinhoItemsListModalDiv.innerHTML = '<p>Seu carrinho está vazio.</p>';
                    if(carrinhoIconeContador) carrinhoIconeContador.textContent = '0';
                } else {
                    carrinho.forEach((item, index) => {
                        totalGeral += item.preco;
                        const itemDiv = document.createElement('div');
                        itemDiv.classList.add('carrinho-item');
                        let htmlContent = `<button class="btn-remover-item" data-index="${index}">Remover</button>`;
                        htmlContent += `<p><strong>${item.isPizza ? 'Pizza' : 'Bebidas'}</strong></p>`;
                        if (item.isPizza) {
                            htmlContent += `<p class="item-sabores">Tamanho: ${item.tamanho || 'N/A'}`;
                            if (item.sabor1 && item.sabor2) htmlContent += ` - ${item.sabor1} / ${item.sabor2}`;
                            else if (item.sabor1) htmlContent += ` - ${item.sabor1}`;
                            else if (item.sabor2) htmlContent += ` - ${item.sabor2}`;
                            htmlContent += `</p>`;
                            if (item.adicionaisPizza.length > 0) {
                                htmlContent += `<p>Adicionais: ${item.adicionaisPizza.join(', ')}</p>`;
                            }
                        }
                        if (item.bebidas.length > 0) {
                            htmlContent += `<p>Bebidas: ${item.bebidas.join(', ')}</p>`;
                        }
                        htmlContent += `<p class="item-preco">Subtotal: R$ ${item.preco.toFixed(2).replace('.', ',')}</p>`;
                        itemDiv.innerHTML = htmlContent;
                        carrinhoItemsListModalDiv.appendChild(itemDiv);
                    });
                    if(carrinhoIconeContador) carrinhoIconeContador.textContent = carrinho.length;
                }
                if(carrinhoTotalGeralModalDiv) carrinhoTotalGeralModalDiv.textContent = `Total do Pedido: R$ ${totalGeral.toFixed(2).replace('.', ',')}`;
            }

            if(carrinhoItemsListModalDiv) { // Adiciona listener ao corpo do modal para os botões de remover
                carrinhoItemsListModalDiv.addEventListener('click', function(event) {
                    if (event.target.classList.contains('btn-remover-item')) {
                        const index = parseInt(event.target.dataset.index);
                        removerItemDoCarrinho(index);
                    }
                });
            }


            function removerItemDoCarrinho(index) {
                carrinho.splice(index, 1); 
                salvarCarrinhoNoStorage(); 
                renderizarCarrinho();
            }
            
            function atualizarLabelsTamanhos() { 
                const tamanhos = ['Pequeno', 'Medio', 'Grande'];
                const labelsInputs = document.querySelectorAll('input[name="tamanho"]');
                const s1 = sabor1Select.value ? sabor1Select : null;
                const s2 = sabor2Select.value ? sabor2Select : null;
                labelsInputs.forEach(labelInput => {
                    const labelElement = labelInput.parentElement;
                    let textoOriginal = ` ${labelInput.value === 'Medio' ? 'Médio' : labelInput.value.charAt(0).toUpperCase() + labelInput.value.slice(1)}`;
                    if (s1 || s2) { 
                        let precoMedio = 0;
                        const nomeTamanhoDataset = labelInput.value.charAt(0).toUpperCase() + labelInput.value.slice(1);
                        const p1 = s1 ? (parseFloat(s1.options[s1.selectedIndex].dataset[`preco${nomeTamanhoDataset}`]) || 0) : 0;
                        const p2 = s2 ? (parseFloat(s2.options[s2.selectedIndex].dataset[`preco${nomeTamanhoDataset}`]) || 0) : 0;
                        if (p1 > 0 && p2 > 0) precoMedio = (p1 + p2) / 2;
                        else if (p1 > 0) precoMedio = p1;
                        else if (p2 > 0) precoMedio = p2;
                        if (precoMedio > 0) textoOriginal += ` - R$ ${precoMedio.toFixed(2).replace('.', ',')}`;
                    }
                    while (labelElement.childNodes.length > 1) {
                        if (labelElement.lastChild !== labelInput) labelElement.removeChild(labelElement.lastChild);
                        else break;
                    }
                    labelElement.appendChild(document.createTextNode(textoOriginal));
                });
            }

            function focusAndAlert(element, message) {
                element.scrollIntoView({ behavior: 'smooth', block: 'center' });
                setTimeout(() => { 
                    element.focus();
                    alert(message);
                }, 50); 
            }


            function gerarMensagemWhatsAppFinal() {
                const cepVal = cepInput.value.trim(); 
                const ruaVal = ruaInput.value.trim(); 
                const numeroVal = numeroInput.value.trim();
                const complementoVal = complementoInput.value.trim(); 
                const bairroVal = bairroInput.value.trim(); 
                const cidadeVal = cidadeInput.value.trim();

                if (!cepVal) { focusAndAlert(cepInput, 'Por favor, informe o CEP.'); return null; }
                if (!ruaVal) { focusAndAlert(ruaInput, 'O campo Rua/Avenida é obrigatório. Verifique o CEP.'); return null; }
                if (!numeroVal) { focusAndAlert(numeroInput, 'Por favor, informe o Número do endereço.'); return null; }
                if (!complementoVal) { focusAndAlert(complementoInput, 'Por favor, informe o Complemento do endereço.'); return null; } 
                if (!bairroVal) { focusAndAlert(bairroInput, 'O campo Bairro é obrigatório. Verifique o CEP.'); return null; }
                if (!cidadeVal) { focusAndAlert(cidadeInput, 'O campo Cidade é obrigatório. Verifique o CEP.'); return null; }


                if (!entregaDisponivelGlobal) {
                    alert('Não é possível finalizar o pedido, pois não entregamos no seu endereço ou a verificação de entrega falhou. Por favor, verifique seu endereço e o status da entrega.'); return null;
                }
                if (carrinho.length === 0) {
                    alert('Seu carrinho está vazio. Adicione itens antes de finalizar o pedido.'); return null;
                }

                let mensagem = `*NOVO PEDIDO PELO SITE*\n\n`;
                mensagem += `🚚 *ENDEREÇO DE ENTREGA*\n`;
                mensagem += `CEP: ${cepVal}\nRua: ${ruaVal}, Nº: ${numeroVal}\n`;
                mensagem += `Complemento: ${complementoVal}\n`; 
                mensagem += `Bairro: ${bairroVal}\nCidade: ${cidadeVal} - ${estadoInput.value}\n\n`;
                
                mensagem += `🛒 *ITENS DO PEDIDO*\n`;
                let totalGeralCalculado = 0;
                carrinho.forEach((item, index) => {
                    mensagem += `\n*Item ${index + 1}:*\n`;
                    if (item.isPizza) {
                        mensagem += `🍕 Pizza ${item.tamanho}`;
                        if (item.sabor1 && item.sabor2) mensagem += ` (${item.sabor1} / ${item.sabor2})\n`;
                        else if (item.sabor1) mensagem += ` (${item.sabor1})\n`;
                        else if (item.sabor2) mensagem += ` (${item.sabor2})\n`;
                        else mensagem += `\n`;
                        if (item.adicionaisPizza.length > 0) mensagem += `  Adicionais: ${item.adicionaisPizza.join(', ')}\n`;
                    }
                    if (item.bebidas.length > 0) {
                        mensagem += `${item.isPizza ? '  ' : ''}🥤 Bebidas: ${item.bebidas.join(', ')}\n`;
                    }
                    mensagem += `  Subtotal: R$ ${item.preco.toFixed(2).replace('.', ',')}\n`;
                    totalGeralCalculado += item.preco;
                });

                mensagem += `\n💰 *TOTAL DO PEDIDO: R$ ${totalGeralCalculado.toFixed(2).replace('.', ',')}*\n\n`;
                mensagem += `Aguardando confirmação.`;
                return encodeURIComponent(mensagem);
            }

            // Event Listeners e Inicializações
            [sabor1Select, sabor2Select].forEach(el => el.addEventListener('change', () => { calcularPrecoItemAtual(); atualizarLabelsTamanhos(); }));
            document.querySelectorAll('input[name="tamanho"]').forEach(el => el.addEventListener('change', () => { calcularPrecoItemAtual(); atualizarLabelsTamanhos(); }));
            document.querySelectorAll('input.adicional-pizza, input.item-bebida').forEach(el => el.addEventListener('change', calcularPrecoItemAtual));
            
            if(btnAdicionarAoCarrinho) btnAdicionarAoCarrinho.addEventListener('click', adicionarItemAoCarrinho);
            if(btnFinalizarCompraModal) {
                btnFinalizarCompraModal.addEventListener('click', function (e) {
                    e.preventDefault();
                    const msg = gerarMensagemWhatsAppFinal();
                    if (msg) {
                        const numeroWhats = '55SEUNUMEROAQUI'; 
                        if (numeroWhats === '55SEUNUMEROAQUI' || numeroWhats.length < 12) {
                            alert("Número de WhatsApp não configurado. Edite o script."); return;
                        }
                        window.open(`https://wa.me/${numeroWhats}?text=${msg}`, '_blank');
                        // Opcional: Limpar o carrinho e fechar o modal após enviar
                        // carrinho = [];
                        // salvarCarrinhoNoStorage();
                        // renderizarCarrinho(); 
                        // fecharModalCarrinho();
                        // alert("Seu pedido foi enviado! O carrinho foi limpo.");
                    }
                });
            }
            
            carregarCarrinhoDoStorage();
            renderizarCarrinho(); // Renderiza o carrinho (e atualiza o contador do ícone)
            calcularPrecoItemAtual(); 
            atualizarLabelsTamanhos(); 
            // --- FIM LÓGICA DE CONFIGURAÇÃO DO ITEM ATUAL E CARRINHO ---
        });
    </script>
</body>
</html>
